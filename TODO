 Stages
============
x 1 Design a layout
x 2 Implement the login system
x 3 Implement the file editor
x 4 Implement the user manager
. 5 Implement the group manager
- 6 Finishing touches (clear all entires on list below)
- 7 Complete optional requirements

 TODO
============
n Use the <pre> tag as comments for teachers
x Get rid of note-resizebar on the editor
n Column in SQLDB for current class
x Implement saving
x Implement passwords
x Implement both a save and a "finish(verzegelen?)" button
x Implement finish button
- Notify teacher about finished portfolio
x Wrap text
n All files in storage have to be owned by http, FIXME?
n The server directory has to be owned by http, FIXME?
x Maybe a different file tree?
x Select current project in sidebar
- Select ALL (not just ^) active sidebar items
- Confirmation before saving
- Make sure user can only be logged in on one location at the time
x Reimplement editor as this one is massively screwed up
x Cursor has a wrong starting position
n Arrow in sidebar to indicate year is populated
x No select and no pointer on login page
- .nopointer and .noselect in seperate css file (eg. "include/utils.css")
n Remove ID from SQL DB
n Allow teachers to create other teachers?
x Maybe create an admin account by default when creating the first account
p Implement SSL correctly (not my priority)
x Implement user management view
	- Sort users in classes ("Stamgroep") if contains "o&o" in "Vakken"
x Check username on every page
- Check GID besides username in verify_login()
- Make sure all DB connections and queries are closed
x Implement motd
	n Teacher
	x Admin
n Shortcut for saving
- Redirect to HTTP forbidden page if inside iFrame and verify_login() failed
- Ask for password before finishing file
p Implement a file manager
x Implement group system based on client feedback
x Make sorttable stfu in the console
x Don't use projectname as foldername, use PID
x Don't use username as foldername, use UID
p Try JQuery's .load() instead of iframes
- Implement importing CSV files from ItsLearning
p Implement exporting to CSV
- Scrollbar overlaps editor and *list in manager_layout.css
- Don't use inline JS anymore
- Make year sorting work in projectmanager
n Rename "Portfolio" to what the client had wanted in the first place
- Option to download entire portfolio
x install.php > init.php
x admin.php > install.php
- Use consts as GID instead of plain ints (in some cases)
- Use cookies less often (talking 'bout index.php)
x Footer in PHP file
x Automatic system for dates, just enter start date
x Implement useradd
x Implement userdel
x Implement usermod
- Check for username and email availablity in usermod
- Deldir in functions.php
x Implement projectmod
- Implement groupadd
- Implement groupmod
- Implement groupdel (perhaps combine with groupmod)
x Group in brackets, students in projects will look like this:
		"student(group),student(group),..."
- Prevent sorting from changing column width
- Add column for project owner UID, only this person can add, remove or change
		users from a group
	- Don't allow teachers to delete each other's projects
x No delete button for teachers in usermanager
p No edit button, change in table itself instead (like group in groupmanager)
- Add breadcrumb (Bootstrap) to index.php
x Remove 'active' column from DB_PROJECTS
- Use sprintf more often as it makes the code look cleaner.
- Rename students to users in DB_PROJECTS
- Use $dbconn->real_escape_string(*) everywhere
x Clean up dir structure
- Clean up php sql connections
- Clean up js files
x Clean up css files
n Merge manager.css and editor.css
n Bottom section of sidebar for special actions like settings and managers
n Seperate page for "reflectie" feedback
x Download button for teacher for "reflectie" student
x Fix multiline editor buttons
x Show download button after finishing document
x Fix ghosting button tooltip in Summernote
- Fix height editor (see note in editor.css)
- Implement grades
x Don't allow images to go off the screen in teacher viewer class .right
- Hide sidebar if not on "Portfolio" tab (so no admin check either)


 Questions
============
n Ask client about functionality editor
n Ask client (and school) for correct logo
. Ask team to make logo
n Ask client (and school) for correct footer
- Ask client about licensing
- Get advice on color scheme (from school or team?)
- Ask client about home page content
x Ask client about registration procedure
n Ask expert (and potentially client) about portfolio creation procedure
x Ask expert if Node.js (perhaps even C?) is preferred over PHP
	> PHP is recommended
. Ask client to export new csv with only required columns
	- Columns: "Groep" (teacher or student), "Gebruikersnaam", "Naam",
			"Vakken" and "E-mail"
			(if all are available)
n Ask client if students should be distributed amongst classes
	> They are now not distributed amongst anything
n Ask client whether classes are global covered by classes or if classes are
	defined per teacher, where the former is more future proof
	> Just went with the former, impatience was dominant
n Ask client if multiple teachers be involved in one project
- Ask client about teacher permissions in usermanager


 Legend
============
- = TODO
! = Important TODO
. = In progress
? = Probably done
x = Done
n = Cancelled
p = Postponed until further notice
